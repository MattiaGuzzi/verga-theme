@function rem($px, $base: $base_font_size) {
    @return ($px / $base) * 1rem;
}

@function em($px, $base: $base_font_size) {
    @return ($px / $base) * 1em;
}

@function vw($target, $vp: 1366) {
    $vw-context: ($vp*.01) * 1px;
    @return ($target/$vw-context) * 1vw;
}

@function vh($target, $vp : 768) {
    $vw-context: ($vp*.01) * 1px;
    @return ($target/$vw-context) * 1vh;
}

@function vmin($target, $vp: 768) {
    $vw-context: ($vp*.01) * 1px;
    @return ($target/$vw-context) * 1vmin;
}

@mixin clearfix {
    zoom: 1;
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin breakpoint($point, $min : true) {
    $min_or_max: null;
    @if $min {
        $min_or_max: "min";
    } @else {
        $min_or_max: "max";
    }
    @media screen and (#{$min_or_max}-width: #{em($point, 16px)}) {
        @content;
    }
}

@mixin normalize_padding {
    padding: {
        left: 10px;
        right: 10px;
    }
    @include breakpoint(640px) {
        padding: {
            left: em(25px);
            right: em(25px);
        }
    }
    @include breakpoint($bp) {
        padding: {
            left: em(50px);
            right: em(50px);
        }
    }
}

@mixin absfull() {
    position: absolute;
    top: 0;
    left: 0;
    width: $f;
    height: $f;
}

@mixin fixfull() {
    position: fixed;
    top: 0;
    left: 0;
    width: $f;
    height: $f;
}

@mixin hidden($isHidden : true, $onlyTrans : false) {
    transition: {
        property: visibility, opacity;
        duration: $speed;
    }
    @if not $onlyTrans {
        @if $isHidden {
            visibility: hidden;
            opacity: 0;
        } @else {
            visibility: visible;
            opacity: 1;
            transition-duration: $speed/2;
        }
    }
}

@mixin grid($max : 12, $points : $bp) {

    [class*="--grid"] {
        display: flex;
        flex-wrap: wrap;

    }
    [class*="--grid-nowrap"] {
        display: flex;
        flex-wrap: nowrap;
    }
    [class*="__cell"] {
        flex: 0 0 auto;
        width: 100%;
    }
    @for $i from 1 through $max - 1 {
        @include breakpoint($points) {
            [class*="-s#{$i}"] {
                width: percentage($i/$max);
            }
        }
    }
}

@mixin grow($s : true, $m : true, $l : true, $v : $p) {

    $rows:null;
    @if ($s and $m and $l) {
        $rows: ('': 2, '-md': 4, '-lg': 8);
    }
    @if ($s==false and $m and $l) {
        $rows: ('-md': 4, '-lg': 8);
    }
    @if ($s and $m==false and $l) {
        $rows: ('': 2, '-lg': 8);
    }
    @if ($s and $m and $l==false) {
        $rows: ('': 2, '-md': 4);
    }
    @if ($s==false and $m and $l==false) {
        $rows: ('-md': 4);
    }
    @if ($s==false and $m==false and $l) {
        $rows: ('-lg': 8);
    }
    @if ($s and $m==false and $l==false) {
        $rows: ('': 2);
    }
    @each $row, $i in $rows {
        &--grow#{$row} {
            padding: {
                top: $v*$i;
                bottom: $v*$i;
            }
        }
        &--grow#{$row}-top {
            padding: {
                top: $v*$i;
            }
        }
        &--grow#{$row}-btm {
            padding: {
                bottom: $v*$i;
            }
        }
    }
}